@@ -1081,100 +1081,149 @@
     * - < 0: Failure.
     *   - -2: The parameter is invalid. For example, the token is invalid, the uid parameter is not set
     * to an integer, or the value of a member in the `ChannelMediaOptions` structure is invalid. You need
     * to pass in a valid parameter and join the channel again.
     *   - -3: Failes to initialize the `IRtcEngine` object. You need to reinitialize the IRtcEngine object.
     *   - -7: The IRtcEngine object has not been initialized. You need to initialize the IRtcEngine
     * object before calling this method.
     *   - -8: The internal state of the IRtcEngine object is wrong. The typical cause is that you call
     * this method to join the channel without calling `stopEchoTest` to stop the test after calling
     * `startEchoTest` to start a call loop test. You need to call `stopEchoTest` before calling this method.
     *   - -17: The request to join the channel is rejected. The typical cause is that the user is in the
     * channel. Agora recommends using the `onConnectionStateChanged` callback to get whether the user is
     * in the channel. Do not call this method to join the channel unless you receive the
     * `CONNECTION_STATE_DISCONNECTED(1)` state.
     *   - -102: The channel name is invalid. You need to pass in a valid channel name in channelId to
     * rejoin the channel.
     *   - -121: The user ID is invalid. You need to pass in a valid user ID in uid to rejoin the channel.
     */
     virtual int joinChannelEx(const char* token, const RtcConnection& connection,
                               const ChannelMediaOptions& options,
                               IRtcEngineEventHandler* eventHandler) = 0;
 
   /**
    * Leaves the channel.
    *
    * This method allows a user to leave the channel, for example, by hanging up or exiting a call.
    *
    * This method is an asynchronous call, which means that the result of this method returns even before
    * the user has not actually left the channel. Once the user successfully leaves the channel, the
    * SDK triggers the \ref IRtcEngineEventHandler::onLeaveChannel "onLeaveChannel" callback.
    *
    * @param connection The RtcConnection object.
    * @return
    * - 0: Success.
    * - < 0: Failure.
    */
     virtual int leaveChannelEx(const RtcConnection& connection) = 0;
 
     /**
      * Leaves the channel with the connection ID.
      *
      * @param connection connection.
      * @param options The options for leaving the channel. See #LeaveChannelOptions.
      * @return int
      * - 0: Success.
      * - < 0: Failure.
      */
     virtual int leaveChannelEx(const RtcConnection& connection, const LeaveChannelOptions& options) = 0;
 
   /**
+    * Leaves a channel with the channel ID and user account.
+    *
+    * This method allows a user to leave the channel, for example, by hanging up or exiting a call.
+    *
+    * This method is an asynchronous call, which means that the result of this method returns even before
+    * the user has not actually left the channel. Once the user successfully leaves the channel, the
+    * SDK triggers the \ref IRtcEngineEventHandler::onLeaveChannel "onLeaveChannel" callback.
+    *
+    * @param channelId The channel name. The maximum length of this parameter is 64 bytes. Supported character scopes are:
+    * - All lowercase English letters: a to z.
+    * - All uppercase English letters: A to Z.
+    * - All numeric characters: 0 to 9.
+    * - The space character.
+    * - Punctuation characters and other symbols, including: "!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=", ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ",".
+    * @param userAccount The user account. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as null. Supported character scopes are:
+    * - All lowercase English letters: a to z.
+    * - All uppercase English letters: A to Z.
+    * - All numeric characters: 0 to 9.
+    * - The space character.
+    * - Punctuation characters and other symbols, including: "!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=", ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ",".
+    * @return
+    * - 0: Success.
+    * - < 0: Failure.
+    */
+    virtual int leaveChannelWithUserAccountEx(const char* channelId, const char* userAccount) = 0;
+
+  /**
+    * Leaves a channel with the channel ID and user account and sets the options for leaving.
+    *
+    * @param channelId The channel name. The maximum length of this parameter is 64 bytes. Supported character scopes are:
+    * - All lowercase English letters: a to z.
+    * - All uppercase English letters: A to Z.
+    * - All numeric characters: 0 to 9.
+    * - The space character.
+    * - Punctuation characters and other symbols, including: "!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=", ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ",".
+    * @param userAccount The user account. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as null. Supported character scopes are:
+    * - All lowercase English letters: a to z.
+    * - All uppercase English letters: A to Z.
+    * - All numeric characters: 0 to 9.
+    * - The space character.
+    * - Punctuation characters and other symbols, including: "!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=", ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ",".
+    * @param options The options for leaving the channel. See #LeaveChannelOptions.
+    * @return int
+    * - 0: Success.
+    * - < 0: Failure.
+    */
+    virtual int leaveChannelWithUserAccountEx(const char* channelId, const char* userAccount, const LeaveChannelOptions& options) = 0;
+
+    /**
      *  Updates the channel media options after joining the channel.
      *
      * @param options The channel media options: ChannelMediaOptions.
      * @param connection The RtcConnection object.
      * @return int
      * - 0: Success.
      * - < 0: Failure.
      */
     virtual int updateChannelMediaOptionsEx(const ChannelMediaOptions& options, const RtcConnection& connection) = 0;
     /**
      * Sets the video encoder configuration.
      *
      * Each configuration profile corresponds to a set of video parameters, including
      * the resolution, frame rate, and bitrate.
      *
      * The parameters specified in this method are the maximum values under ideal network conditions.
      * If the video engine cannot render the video using the specified parameters due
      * to poor network conditions, the parameters further down the list are considered
      * until a successful configuration is found.
      *
      * @param config The local video encoder configuration: VideoEncoderConfiguration.
      * @param connection The RtcConnection object.
      * @return
      * - 0: Success.
      * - < 0: Failure.
      */
     virtual int setVideoEncoderConfigurationEx(const VideoEncoderConfiguration& config, const RtcConnection& connection) = 0;
     /**
      * Initializes the video view of a remote user.
      *
      * This method initializes the video view of a remote stream on the local device. It affects only the
      * video view that the local user sees.
      *
      * Usually the app should specify the `uid` of the remote video in the method call before the
      * remote user joins the channel. If the remote `uid` is unknown to the app, set it later when the
      * app receives the \ref IRtcEngineEventHandler::onUserJoined "onUserJoined" callback.
      *
      * To unbind the remote user from the view, set `view` in VideoCanvas as `null`.
      *
      * @note
      * Ensure that you call this method in the UI thread.
      *
      * @param canvas The remote video view settings: VideoCanvas.
      * @param connection The RtcConnection object.
      * @return
      * - 0: Success.
      * - < 0: Failure.
      */
     virtual int setupRemoteVideoEx(const VideoCanvas& canvas, const RtcConnection& connection) = 0;
     /**
@@ -1867,100 +1916,127 @@
   /**
     * Set the high priority user list and their fallback level in weak network condition.
     *
     * @note
     * - This method can be called before and after joining a channel.
     * - If a subscriber is set to high priority, this stream only fallback to lower stream after all normal priority users fallback to their fallback level on weak network condition if needed.
     *
     * @param uidList The high priority user list.
     * @param uidNum The size of uidList.
     * @param option The fallback level of high priority users.
     * @param connection An output parameter which is used to control different connection instances.
     *
     * @return int
     * - 0 : Success.
     * - <0 : Failure.
     */
     virtual int setHighPriorityUserListEx(uid_t* uidList, int uidNum,
                                           STREAM_FALLBACK_OPTIONS option,
                                           const RtcConnection& connection) = 0;
 
   /**
    * Takes a snapshot of a video stream.
    *
    * This method takes a snapshot of a video stream from the specified user, generates a JPG
    * image, and saves it to the specified path.
    *
    * The method is asynchronous, and the SDK has not taken the snapshot when the method call
    * returns. After a successful method call, the SDK triggers the `onSnapshotTaken` callback
    * to report whether the snapshot is successfully taken, as well as the details for that
    * snapshot.
    *
    * @note
    * - Call this method after joining a channel.
    * - This method takes a snapshot of the published video stream specified in `ChannelMediaOptions`.
    * - If the user's video has been preprocessed, for example, watermarked or beautified, the resulting
    * snapshot includes the pre-processing effect.
    * @param connection The RtcConnection object.
    * @param uid The user ID. Set uid as 0 if you want to take a snapshot of the local user's video.
    * @param filePath The local path (including filename extensions) of the snapshot. For example:
    * - Windows: `C:\Users\<user_name>\AppData\Local\Agora\<process_name>\example.jpg`
    * - iOS: `/App Sandbox/Library/Caches/example.jpg`
    * - macOS: `～/Library/Logs/example.jpg`
    * - Android: `/storage/emulated/0/Android/data/<package name>/files/example.jpg`
    *
    * Ensure that the path you specify exists and is writable.
    * @return
    * - 0 : Success.
    * - < 0 : Failure.
    */
     virtual int takeSnapshotEx(const RtcConnection& connection, uid_t uid, const char* filePath)  = 0;
+
+  /**
+   * Takes a snapshot of a video stream.
+   *
+   * This method takes a snapshot of a video stream from the specified user, generates a JPG
+   * image, and saves it to the specified path.
+   *
+   * The method is asynchronous, and the SDK has not taken the snapshot when the method call
+   * returns. After a successful method call, the SDK triggers the `onSnapshotTaken` callback
+   * to report whether the snapshot is successfully taken, as well as the details for that
+   * snapshot.
+   *
+   * @note
+   * - Call this method after joining a channel.
+   * - This method takes a snapshot of the published video stream specified in `ChannelMediaOptions`.
+   *
+   * @param connection The RtcConnection object.
+   * @param uid The user ID. Set uid as 0 if you want to take a snapshot of the local user's video.
+   * @param config The configuration for the take snapshot. See SnapshotConfig.
+   *
+   * Ensure that the path you specify exists and is writable.
+   * @return
+   * - 0 : Success.
+   * - &lt; 0: Failure.
+   *   - -4: Incorrect observation position. Modify the input observation position according to the reqiurements specified in SnapshotConfig.
+   */
+    virtual int takeSnapshotEx(const RtcConnection& connection, uid_t uid, const media::SnapshotConfig& config)  = 0;
     
     /** Enables video screenshot and upload with the connection ID.
     @param enabled Whether to enable video screenshot and upload:
     - `true`: Yes.
     - `false`: No.
     @param config The configuration for video screenshot and upload.
     @param connection The connection information. See RtcConnection.
     @return
     - 0: Success.
     - < 0: Failure.
     */
     virtual int enableContentInspectEx(bool enabled, const media::ContentInspectConfig &config, const RtcConnection& connection) = 0;
 
     /**
      @brief Start tracing media rendering events.
      @since v4.1.1
      @discussion
      - SDK will trace media rendering events when this API is called.
      - The tracing result can be obtained through callback `IRtcEngineEventHandler(Ex)::onVideoRenderingTracingResult`
      @param connection The RtcConnection object.
      @note
      - By default, SDK will trace media rendering events when `IRtcEngineEx::joinChannelEx` is called.
      - The start point of event tracing will be reset after leaving channel.
      @return
      - 0: Success.
      - < 0: Failure.
       - -2(ERR_INVALID_ARGUMENT): The parameter is invalid. Check the channel ID and local uid set by parameter `connection`.
       - -7(ERR_NOT_INITIALIZED): The SDK is not initialized. Initialize the `IRtcEngine` instance before calling this method.
      */
     virtual int startMediaRenderingTracingEx(const RtcConnection& connection) = 0;
 
     /** Provides the technical preview functionalities or special customizations by configuring the SDK with JSON options.
     @since v4.3.0
     @param connection The connection information. See RtcConnection.
     @param parameters Pointer to the set parameters in a JSON string.
     @return
     - 0: Success.
     - < 0: Failure.
     */
     virtual int setParametersEx(const RtcConnection& connection, const char* parameters) = 0;
 
     /**
      * Gets the current call ID.
      *
      * When a user joins a channel on a client, a `callId` is generated to identify
      * the call.
      *
      * After a call ends, you can call `rate` or `complain` to gather feedback from the customer.
      * These methods require a `callId` parameter. To use these feedback methods, call the this
      * method first to retrieve the `callId` during the call, and then pass the value as an
Only in headers/rtc_4.4.0/include: internal
Only in headers/rtc_4.5.0/include: rte_base