@@ -1,60 +1,59 @@
 //
 //  Agora SDK
 //
 //  Copyright (c) 2022 Agora.io. All rights reserved.
 //
 #pragma once  // NOLINT(build/header_guard)
 
 #include "AgoraBase.h"
 #include "AgoraMediaBase.h"
-#include "IAgoraRtcEngineEx.h"
 
 namespace agora {
 namespace rtc {
 
 class IMediaRecorder : public RefCountInterface {
  protected:
   virtual ~IMediaRecorder() {}
 
  public:
   /**
    * Registers the IMediaRecorderObserver object.
    *
    * @since v4.0.0
    *
    * @note Call this method before the startRecording method.
    *
    * @param callback The callbacks for recording audio and video streams. See \ref IMediaRecorderObserver.
    *
    * @return
    * - 0(ERR_OK): Success.
    * - < 0: Failure:
    */
   virtual int setMediaRecorderObserver(media::IMediaRecorderObserver* callback) = 0;
   /**
    * Starts recording the local or remote audio and video.
    *
    * @since v4.0.0
    *
    * After successfully calling \ref IRtcEngine::createMediaRecorder "createMediaRecorder" to get the media recorder object
    * , you can call this method to enable the recording of the local audio and video.
    *
    * This method can record the following content:
    * - The audio captured by the local microphone and encoded in AAC format.
    * - The video captured by the local camera and encoded by the SDK.
    * - The audio received from remote users and encoded in AAC format.
    * - The video received from remote users.
    * 
    * The SDK can generate a recording file only when it detects the recordable audio and video streams; when there are
    * no audio and video streams to be recorded or the audio and video streams are interrupted for more than five
    * seconds, the SDK stops recording and triggers the
    * \ref IMediaRecorderObserver::onRecorderStateChanged "onRecorderStateChanged" (RECORDER_STATE_ERROR, RECORDER_ERROR_NO_STREAM)
    * callback.
    *
    * @note Call this method after joining the channel.
    *
    * @param config The recording configurations. See MediaRecorderConfiguration.
    *
    * @return
    * - 0(ERR_OK): Success.
    * - < 0: Failure: